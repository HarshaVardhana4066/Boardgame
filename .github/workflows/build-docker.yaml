name: Build, Tag, Release and Docker Push

permissions:
  contents: write

on:
  workflow_dispatch:       # Manual trigger
  push:
    branches:
      - main
      - feature/**          # All feature branches

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.set-version.outputs.new_version }}

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0       # Required to fetch all tags

      # Step 2: Fetch all tags
      - name: Fetch all tags
        run: git fetch --tags

      # Step 3: Set Version
      - name: Set Version
        id: set-version
        run: |
          # Get the latest numeric tag (ignore pre-releases or branch tags)
          latest_tag=$(git tag --sort=-creatordate | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n1)

          if [ -z "$latest_tag" ]; then
            base_version="1.0.0"
          else
            IFS='.' read -r major minor patch <<< "${latest_tag#v}"
            patch=$((patch + 1))
            base_version="$major.$minor.$patch"
          fi

          # Sanitize branch name
          branch_name=${GITHUB_REF_NAME//\//-}

          # Feature branch version
          if [[ "$GITHUB_REF_NAME" != "refs/heads/main" ]]; then
            new_version="${base_version}-${branch_name}"
          else
            new_version="$base_version"
          fi

          echo "New version: $new_version"
          echo "new_version=$new_version" >> "$GITHUB_OUTPUT"

      # Step 4: Set Git user
      - name: Set Git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      # Step 5: Create Git tag if it doesn't exist
      - name: Push Git tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          NEW_TAG="v${{ steps.set-version.outputs.new_version }}"
          if git rev-parse "$NEW_TAG" >/dev/null 2>&1; then
            echo "Tag $NEW_TAG already exists. Skipping tag creation."
          else
            git tag -a "$NEW_TAG" -m "Release $NEW_TAG"
            git push https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }} "$NEW_TAG"
          fi

      # Step 6: Create GitHub Release if it doesn't exist
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          NEW_TAG="v${{ steps.set-version.outputs.new_version }}"
          if gh release view "$NEW_TAG" >/dev/null 2>&1; then
            echo "Release $NEW_TAG already exists. Skipping."
          else
            gh release create "$NEW_TAG" \
              --title "Release $NEW_TAG" \
              --notes "Automated release for $NEW_TAG" \
              --prerelease $([[ "${GITHUB_REF_NAME}" != "refs/heads/main" ]] && echo true || echo false)
          fi

      # Step 7: Set up JDK 11
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: 'maven'

      # Step 8: Build with Maven
      - name: Build with Maven
        run: mvn clean install -DskipTests

      # Step 9: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 10: Login to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 11: Build Docker image and push **only on main branch**
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        if: github.ref == 'refs/heads/main'
        with:
          context: .
          file: Dockerfile1
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/boardgame-fromgit:v${{ steps.set-version.outputs.new_version }}
