name: Build and publish Docker image

permissions:
  contents: write

on:
  push:
    branches:
      - main
      - feature
  pull_request:
    branches:
      - main
      - feature
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout full repository with tags
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2Ô∏è‚É£ Set version (always bump patch)
      - name: Set Version
        id: set-version
        run: |
          git fetch --tags
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
          echo "Latest tag: $latest_tag"
          IFS='.' read -r major minor patch <<< "${latest_tag#v}"
          # Increment patch until new tag does not exist
          while true; do
            patch=$((patch + 1))
            new_tag="v${major}.${minor}.${patch}"
            if ! git rev-parse "$new_tag" >/dev/null 2>&1; then
              break
            fi
          done
          echo "New tag: $new_tag"
          echo "new_tag=$new_tag" >> "$GITHUB_OUTPUT"

      # 3Ô∏è‚É£ Configure Git
      - name: Configure Git user
        run: |
          git config user.name "Harshavardhana"
          git config user.email "your-email@example.com"

      # 4Ô∏è‚É£ Tag handling: main ‚Üí v1.0.x, feature ‚Üí feature-v1.0.x
      - name: Create branch-specific tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          branch="${GITHUB_REF##*/}"
          tag="${{ steps.set-version.outputs.new_tag }}"

          if [ "$branch" = "main" ]; then
            final_tag="$tag"
          else
            final_tag="${branch}-${tag}"
          fi

          echo "FINAL TAG: $final_tag"
          echo "final_tag=$final_tag" >> $GITHUB_ENV

          # Create and push tag (both main and feature)
          git tag -a "$final_tag" -m "Internal build for $branch ($final_tag)"
          git push origin "$final_tag"

      # 5Ô∏è‚É£ Update pom.xml with tag version
      - name: Update pom.xml with tag version
        run: |
          mvn versions:set -DnewVersion=${{ env.final_tag }} -DgenerateBackupPoms=false
          echo "Updated pom.xml to version: ${{ env.final_tag }}"
          grep "<version>" pom.xml | head -n 1

      # 6Ô∏è‚É£ Set up JDK for Maven
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: 'maven'

      # 7Ô∏è‚É£ Build Maven project
      - name: Build with Maven
        run: mvn clean install -DskipTests

      # 8Ô∏è‚É£ Setup Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 9Ô∏è‚É£ Docker login (main only)
      - name: Login to Docker Hub
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # üîü Build and push Docker image (main only)
      - name: Build and Push Docker image
        if: github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile1
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/boardgame-fromgit:${{ env.final_tag }}

      # 1Ô∏è‚É£1Ô∏è‚É£ Create GitHub release (main only)
      - name: Create GitHub Release
        if: github.ref == 'refs/heads/main'
        uses: actions/create-release@v1
        with:
          tag_name: "${{ env.final_tag }}"
          release_name: "Release ${{ env.final_tag }}"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
