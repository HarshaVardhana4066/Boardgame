name: Build and publish Docker image

permissions:
  contents: write

on:
  push:
    branches:
      - main
      - feature
  pull_request:
    branches:
      - main
      - feature
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2Ô∏è‚É£ Setup JDK for Maven
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: 'maven'

      # 3Ô∏è‚É£ Build Maven project
      - name: Build with Maven
        run: mvn clean install -DskipTests

      # 4Ô∏è‚É£ Setup Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 5Ô∏è‚É£ Docker login (main branch only)
      - name: Login to Docker Hub
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 6Ô∏è‚É£ Build Docker image
      - name: Build Docker image
        run: |
          docker build -t boardgame-temp -f Dockerfile1 .

      # 7Ô∏è‚É£ Set Version (only after successful build)
      - name: Set Version
        id: set-version
        run: |
          git fetch --tags
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
          echo "Latest tag: $latest_tag"
          IFS='.' read -r major minor patch <<< "${latest_tag#v}"
          while true; do
            patch=$((patch + 1))
            new_tag="v${major}.${minor}.${patch}"
            if ! git rev-parse "$new_tag" >/dev/null 2>&1; then
              break
            fi
          done
          branch="${GITHUB_REF##*/}"
          if [ "$branch" = "main" ]; then
            docker_tag="${new_tag}"
          else
            docker_tag="${branch}-${new_tag}"
          fi
          echo "new_tag=$new_tag" >> "$GITHUB_OUTPUT"
          echo "docker_tag=$docker_tag" >> $GITHUB_ENV
          echo "Branch: $branch"
          echo "Docker Tag: $docker_tag"

      # 8Ô∏è‚É£ Tag Docker image
      - name: Tag Docker image
        run: |
          docker tag boardgame-temp ${{ secrets.DOCKERHUB_USERNAME }}/boardgame-fromgit:${{ env.docker_tag }}

      # 9Ô∏è‚É£ Push Docker image (only for main)
      - name: Push Docker image
        if: github.ref == 'refs/heads/main'
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/boardgame-fromgit:${{ env.docker_tag }}

      # üîü Configure Git for tagging (only main)
      - name: Configure Git user
        if: github.ref == 'refs/heads/main'
        run: |
          git config user.name "Harshavardhana"
          git config user.email "your-email@example.com"

      # 1Ô∏è‚É£1Ô∏è‚É£ Push Git tag (after Docker build & tag creation)
      - name: Push Git tag
        if: github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git tag -a "${{ steps.set-version.outputs.new_tag }}" -m "Release ${{ steps.set-version.outputs.new_tag }}"
          git push origin "${{ steps.set-version.outputs.new_tag }}"

      # 1Ô∏è‚É£2Ô∏è‚É£ Create GitHub Release (after tag pushed)
      - name: Create GitHub Release
        if: github.ref == 'refs/heads/main'
        uses: actions/create-release@v1
        with:
          tag_name: "${{ steps.set-version.outputs.new_tag }}"
          release_name: "Release ${{ steps.set-version.outputs.new_tag }}"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
