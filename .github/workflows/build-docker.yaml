name: Build and publish Docker image

permissions:
  contents: write

on:
  push:
    branches:
      - feature
      - main
  pull_request:
    branches:
      - feature
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout full repo with tags
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2️⃣ Set Version (always bump)
      - name: Set Version
        id: set-version
        run: |
          git fetch --tags

          # Get latest tag or default
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
          echo "Latest tag: $latest_tag"

          IFS='.' read -r major minor patch <<< "${latest_tag#v}"

          # Increment patch until tag does not exist
          while true; do
            patch=$((patch + 1))
            new_tag="v${major}.${minor}.${patch}"
            if ! git rev-parse "$new_tag" >/dev/null 2>&1; then
              break
            fi
          done

          new_version="${major}.${minor}.${patch}"  # release version, no SNAPSHOT
          echo "Next tag: $new_tag"
          echo "Next version: $new_version"

          echo "new_tag=$new_tag" >> "$GITHUB_OUTPUT"
          echo "new_version=$new_version" >> "$GITHUB_OUTPUT"

      # 3️⃣ Configure Git user (main only)
      - name: Configure Git user
        if: github.ref == 'refs/heads/main'
        run: |
          git config user.name "Harshavardhana"
          git config user.email "your-email@example.com"

      # 4️⃣ Push Git tag (main only)
      - name: Push Git tag
        if: github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git tag -a "${{ steps.set-version.outputs.new_tag }}" -m "Release ${{ steps.set-version.outputs.new_tag }}"
          git push origin "${{ steps.set-version.outputs.new_tag }}"

      # 5️⃣ Create GitHub Release (main only)
      - name: Create GitHub Release
        if: github.ref == 'refs/heads/main'
        uses: actions/create-release@v1
        with:
          tag_name: "${{ steps.set-version.outputs.new_tag }}"
          release_name: "Release ${{ steps.set-version.outputs.new_tag }}"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 6️⃣ Setup JDK
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: 'maven'

      # 7️⃣ Build Maven project
      - name: Build with Maven
        run: mvn clean install -DskipTests

      # 8️⃣ Setup Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 9️⃣ Docker login
      - name: Set Docker tag
        id: docker-tag
        run: |
          if [ "${GITHUB_REF##*/}" = "main" ]; then
            echo "docker_tag=v${{ steps.set-version.outputs.new_tag }}" >> $GITHUB_ENV
          else
            echo "docker_tag=${GITHUB_REF##*/}" >> $GITHUB_ENV
          fi
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 🔟 Build and push Docker image
      - name: Build and Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile1
          push: true
          # Tag with Git tag for main, branch name for feature
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/boardgame-fromgit:$(
            if [ "${GITHUB_REF##*/}" = "main" ]; then
              echo "${{ steps.set-version.outputs.new_tag }}"
            else
              echo "${GITHUB_REF##*/}"
            fi
           )
